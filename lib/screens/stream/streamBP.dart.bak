import 'package:better_player/better_player.dart';
import 'package:flutter/services.dart';
import 'package:jellyflut/api/items.dart';
import 'package:jellyflut/models/item.dart';
import 'package:jellyflut/models/mediaStream.dart';
import 'package:jellyflut/shared/shared.dart';
import 'package:flutter/material.dart';
import 'package:wakelock/wakelock.dart';

import '../../globals.dart';

class Stream extends StatefulWidget {
  @override
  _StreamState createState() => _StreamState();
}

class _StreamState extends State<Stream> {
  BetterPlayerController _betterPlayerController;
  Item item = new Item();

  @override
  void initState() {
    // final Item media = ModalRoute.of(context).settings.arguments as Item;
    super.initState();
    SystemChrome.setEnabledSystemUIOverlays([SystemUiOverlay.bottom]);
    Wakelock.enable();
    Future.delayed(Duration.zero, () {
      setState(() {
        item = ModalRoute.of(context).settings.arguments as Item;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        backgroundColor: Colors.black,
        body: FutureBuilder<BetterPlayerController>(
          future: _initializePlay(),
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              _betterPlayerController = snapshot.data;
              return Center(
                  child: AspectRatio(
                aspectRatio: 16 / 9,
                child: BetterPlayer(
                  controller: snapshot.data,
                ),
              ));
            } else {
              return CircularProgressIndicator();
            }
          },
        ));
  }

  @override
  void dispose() {
    super.dispose();
    Wakelock.disable();
    SystemChrome.setEnabledSystemUIOverlays([SystemUiOverlay.top]);
    _betterPlayerController.removeListener(() {});
    _betterPlayerController.pause();
    _betterPlayerController.dispose();
  }

  String createURl(Item item, {int startTick = 0}) {
    return "${server.url}/Videos/${item.id}/stream.${item.container.split(',').first}?startTimeTicks=${startTick}";
    // String url =
    //     "${server.url}/Videos/${item.id}/stream.avi?startTimeTicks=${startTick}";
    // return url;
  }

  String createTranscodeUrl(Item item) {
    Map<String, String> queryParam = new Map();

    queryParam["MediaSourceId"] = item.id;
    queryParam["VideoCodec"] = "h264";
    queryParam["AudioCodec"] = "mp3,aac";
    queryParam["AudioStreamIndex:"] = "1";
    queryParam["VideoBitrate"] = "148288567";
    queryParam["AudioBitrate"] = "384000";
    queryParam["PlaySessionId"] = "1f4dcede9ece4cb9a8bd558c98e29e88";
    queryParam["api_key"] = apiKey;
    queryParam["TranscodingMaxAudioChannels"] = "2";
    queryParam["RequireAvc"] = "false";
    // queryParam["Tag"] = "44db3569cff049d3039fab0ac7d83975";
    queryParam["SegmentContainer"] = "ts";
    queryParam["MinSegments"] = "1";
    queryParam["BreakOnNonKeyFrames"] = "true";
    queryParam["h264-profile"] = "high,main,baseline,constrainedbaseline";
    queryParam["h264-level"] = "51";
    queryParam["h264-deinterlace"] = "true";
    queryParam["TranscodeReasons"] = "VideoCodecNotSupported";

    final uri = new Uri.https(server.url.replaceAll('https://', ''),
        '/videos/${item.id}/main.m3u8', queryParam);
    String url = uri.toString();
    return url;
  }

  Future<BetterPlayerController> _initializePlay() async {
    item = await getItem(item.id);
    String videoPath = createURl(item);

    BetterPlayerDataSource betterPlayerDataSource =
        BetterPlayerDataSource(BetterPlayerDataSourceType.NETWORK, videoPath);
    return BetterPlayerController(
        BetterPlayerConfiguration(
            fit: BoxFit.contain,
            placeholder: Center(child: CircularProgressIndicator())),
        betterPlayerDataSource: betterPlayerDataSource);
  }

  void changeSubtitle(Item item, BuildContext context) {
    List<MediaStream> subtitles = item.mediaStreams
        .where((element) => element.type.toString() == "Type.SUBTITLE")
        .toList();
    if (subtitles != null && subtitles.length > 0) {
      showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: Text("Select Subtitle"),
              content: Container(
                width: double.maxFinite,
                height: 250,
                child: ListView.builder(
                  itemCount: subtitles.length + 1,
                  itemBuilder: (context, index) {
                    return ListTile(
                      title: Text(
                        index < subtitles.length
                            ? subtitles[index].displayTitle
                            : 'Disable',
                      ),
                      onTap: () {
                        Navigator.pop(
                          context,
                          index < subtitles.length ? subtitles[index] : -1,
                        );
                      },
                    );
                  },
                ),
              ),
            );
          });
    } else {
      showToast("No subtitles found");
    }
  }

  void changeAudioSource(Item item, BuildContext context) {
    List<MediaStream> subtitles = item.mediaStreams
        .where((element) => element.type.toString() == "Type.AUDIO")
        .toList();
    if (subtitles != null && subtitles.length > 0) {
      showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: Text("Select Subtitle"),
              content: Container(
                width: double.maxFinite,
                height: 250,
                child: ListView.builder(
                  itemCount: subtitles.length + 1,
                  itemBuilder: (context, index) {
                    return ListTile(
                      title: Text(
                        index < subtitles.length
                            ? subtitles[index].displayTitle
                            : 'Disable',
                      ),
                      onTap: () {
                        Navigator.pop(
                          context,
                          index < subtitles.length ? subtitles[index] : -1,
                        );
                      },
                    );
                  },
                ),
              ),
            );
          });
    } else {
      showToast("No subtitles found");
    }
  }
}
